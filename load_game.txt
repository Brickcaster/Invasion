///Load the game

if !file_exists("savegame.save") { return false }

// We're still here?  Good!
gameLoaded = true;

// Blow up everything, just in case;
with (Map) {
     instance_destroy();
}
with (Unit) {
     instance_destroy();
}
with (Tile) {
     instance_destroy();
}     

instance_create(0,0, Map);

//var saveData = ds_map_secure_load("savegame.save");
file = file_text_open_read("savegame.save");
var saveData = json_decode(file_text_read_string(file));
file_text_close(file);

// Load map
var mapData = ds_map_find_value(saveData, "map");
Map.mapWidth = ds_map_find_value(mapData, "mapWidth");
Map.mapLength = ds_map_find_value(mapData, "mapLength");
Map.mapWidthActive = Map.mapWidth;
Map.mapLengthActive = Map.mapLength;
//show_debug_message( "MapWidth from save: " + string(ds_map_find_value(mapData, "mapWidth")));

// Load tiles
var tileData = ds_map_find_value(saveData, "tiles");
//show_debug_message( "TileData: " + json_encode(tileData));
var size = ds_map_size(tileData);
var tileKey = ds_map_find_first(tileData);

for (var i = 0; i < size; i++;) {
    var tile = ds_map_find_value(tileData, tileKey);
    //show_debug_message( "Tile from save: " + string(tile[|0]));
    map[tile[|2], tile[|3]] = instance_create(tile[|0], tile[|1], Tile);
    map[tile[|2], tile[|3]].xx = tile[|2]
    map[tile[|2], tile[|3]].yy = tile[|3]
    tileKey = ds_map_find_next(tileData, tileKey);
}

show_debug_message("Map: " + string(map) );

//Rebuild neighbor list
with (Map) event_user(2);

// Load units
var unitData = ds_map_find_value(saveData, "units");
var size = ds_map_size(unitData);
var unitKey = ds_map_find_first(unitData);
for (var i = 0; i < size; i++) {
    var unit = ds_map_find_value(unitData, unitKey);
    //show_debug_message("Loading object " + string(unit[|0]) + " and other unit data: " + string(unit[|1]) + string(unit[|2]));
    var assetIndex = asset_get_index(unit[|0]);
    if assetIndex == -1 {
       show_debug_message("Object " + unit[|0] + " not found on load!");
       continue;
    }
    var inst = instance_create(unit[|2], unit[|3], assetIndex);
    inst.name = unit[|1];
    inst.state = unit[|4];
    inst.hp = unit[|5];
    inst.maxhp = unit[|6];
    inst.regen = unit[|7];
    inst.attack = unit[|8];
    inst.defense = unit[|9];
    inst.damage = unit[|10];
    inst.level = unit[|11];
    if object_is_ancestor(inst.object_index, HeroType) {
       inst.experience = unit[|12];
       inst.TNL = unit[|13];
    }
    unitKey = ds_map_find_next(unitData, unitKey);
}
    
ds_map_destroy(saveData);
